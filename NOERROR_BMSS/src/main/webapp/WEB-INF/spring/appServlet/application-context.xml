<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

<!-- db.properties 파일을 bean으로 만듦 -->
<context:property-placeholder location="classpath:properties/db.properties"/>

<!-- Datasource를 위한 JDBC Connection Pool Bean : HikariCP -->
<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
	<property name="driverClassName" value="${driver}"/>
	<property name="jdbcUrl" value="${url}"/>
	<property name="username" value="${user}"/>
	<property name="password" value="${pw}"/>
</bean>
<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource">
	<constructor-arg ref="hikariConfig"/>
</bean>

<!-- MyBatis 객체인 SqlSessionFactory를 bean으로 생성 -->
<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource"/>
	<property name="configLocation" value="classpath:config/Configuration.xml"/>
</bean>

<!-- Spring에서 @Autowired를 통해서 DI할 template bean 생성 -->
<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
	<constructor-arg ref="sqlSessionFactoryBean"/>
</bean>

<!-- Transaction @(Annotation) 처리를 위한 설정 -->
<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<constructor-arg name="dataSource" ref="dataSource"/>
</bean>

<!--  Transaction AOP 설정 예외가 발생했을때를 Advice로 설정을 함 -->
<tx:advice id="advice" transaction-manager="transactionManager">
	<tx:attributes>
		<tx:method name="*" propagation="REQUIRED" rollback-for="e"/>
	</tx:attributes>
</tx:advice>

<aop:config>
	<aop:advisor advice-ref="advice" pointcut="execution(public * com.gd.bmss.service.*Service*.*(..))"/>
</aop:config>

</beans>
