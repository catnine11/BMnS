<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.gd.bmss.mapper.UserDaoImpl">

<!-- 회원가입 -->
<insert id="joinUser" parameterType="UserVo">
	<selectKey keyProperty="user_id" resultType="java.lang.Integer" order="BEFORE">
		SELECT USER_SEQ_SEQUENCE.NEXTVAL AS USER_ID FROM DUAL
	</selectKey>
	INSERT INTO BOOK_USERINFO(USER_ID,
												 USER_NAME,
												 USER_EMAIL,
												 USER_PASSWORD, 
												 USER_BIRTH, 
												 USER_PHONE, 
												 USER_ADDRESS, 
												 USER_AUTH, 
												 USER_DELFLAG, 
												 GUBUN, 
												 USER_JOINDATE  
												 )
				VALUES (#{user_id}, 
								#{user_name}, 
								#{user_email}, 
								#{user_password}, 
								#{user_birth}, 
								#{user_phone}, 
								#{user_address},
								'U', 
								'N',
								'nomal',
								SYSDATE
								)
</insert>
	
	<!-- 회원가입 -->
<insert id="joinSocial">
	<selectKey keyProperty="social_id" resultType="java.lang.Integer" order="BEFORE">
		SELECT USER_SEQ_SEQUENCE.NEXTVAL AS USER_ID FROM DUAL
	</selectKey>
	INSERT INTO BOOK_SOCIALINFO(SOCIAL_ID, 
														SOCIAL_NAME, 
														SOCIAL_EMAIL, 
														SOCIAL_PHONE, 
														SOCIAL_TOKEN, 
														SOCIAL_AUTH,
														SOCIAL_GUBUN
														)
					VALUES(#{social_id}, 
								#{social_name}, 
								#{social_email}, 
								#{social_phone},
								#{social_token}, 
								'U',
								#{social_gubun}
								)
</insert>

<!-- 소셜아이디 중복검사 -->
<select id="checkEmail" resultType="java.lang.Integer">
	SELECT COUNT(SOCIAL_EMAIL)
FROM(SELECT DISTINCT SOCIAL_EMAIL
			FROM (SELECT SOCIAL_EMAIL FROM BOOK_SOCIALINFO WHERE SOCIAL_GUBUN=#{social_gubun}))
WHERE SOCIAL_EMAIL = #{social_email}
</select>

<!-- 리프레시토큰 업데이트 -->
<update id="updateRetoken">
	UPDATE BOOK_SOCIALINFO
		SET SOCIAL_TOKEN = #{social_token}
	WHERE SOCIAL_ID = #{social_id}
</update>

<!-- 로그인 -->
<select id="login" resultType="UserVo">
	SELECT USER_ID, USER_NAME ,USER_PASSWORD,RPAD('*', 4, '*') || SUBSTR(USER_EMAIL , 5) AS USER_EMAIL ,USER_AUTH ,USER_DELFLAG ,USER_ADDRESS,SUBSTR(USER_PHONE , 1, LENGTH(USER_PHONE)-6) || RPAD('*', 6, '*') AS USER_PHONE,USER_BIRTH,PENALTY_DATE,TO_CHAR(USER_JOINDATE , 'YYYY-MM-DD') AS USER_JOINDATE,GUBUN 
		FROM BOOK_USERINFO u 
	WHERE USER_EMAIL = #{user_email} AND USER_PASSWORD = #{user_password} AND USER_DELFLAG = 'N'
</select>

<!-- 중복회원 검사 -->
<select id="emailCheck" resultType="java.lang.Integer">
	SELECT COUNT(*)
		FROM BOOK_USERINFO
	WHERE USER_EMAIL = #{user_email} AND GUBUN='nomal'
</select>

<!-- 정보수정 -->
<update id="updateUser">
	UPDATE BOOK_USERINFO
		SET USER_PASSWORD=#{user_password}, USER_ADDRESS=#{user_address}
	WHERE USER_ID=#{user_id} AND GUBUN = 'nomal'
</update>
<!-- 비밀번호 초기화 -->
<update id="updatePwd">
	UPDATE BOOK_USERINFO
		SET USER_PASSWORD = #{user_password}
	WHERE USER_EMAIL=#{user_email} AND GUBUN='nomal' AND USER_PHONE = #{user_phone}
</update>

<!-- 관리자가 소셜조회 -->
<select id="selectSocial" resultType="SocialVo">
	SELECT SOCIAL_ID ,SOCIAL_NAME, SOCIAL_EMAIL, SOCIAL_PHONE,SOCIAL_GUBUN
FROM BOOK_SOCIALINFO
ORDER BY 1
</select>

<!-- 상세조회 -->
<select id="detailSocial" resultType="SocialVo">
	SELECT SOCIAL_ID,SOCIAL_NAME, SOCIAL_EMAIL, SOCIAL_PHONE,SOCIAL_GUBUN
FROM BOOK_SOCIALINFO
WHERE SOCIAL_ID =  #{social_id}
</select>

<!-- 회원리스트조회    -->
<select id="selectUser" resultType="UserVo">
SELECT USER_ID , USER_NAME, USER_EMAIL, USER_BIRTH, USER_PHONE, USER_ADDRESS,GUBUN , TO_CHAR(PENALTY_DATE,'YYYY-MM-DD') AS PENALTY_DATE, USER_JOINDATE
FROM BOOK_USERINFO
WHERE USER_AUTH = 'U'
ORDER BY 1
</select>

<!-- 회원상세조회    -->
<select id="detailUser" resultType="UserVo">
SELECT USER_ID, USER_NAME, USER_EMAIL, USER_BIRTH, USER_PHONE, USER_ADDRESS, USER_AUTH,USER_DELFLAG, PENALTY_DATE, USER_JOINDATE,GUBUN
FROM BOOK_USERINFO
WHERE USER_ID = #{user_id}
</select>

<!-- EMAIL찾기 -->
<select id="findEmail" resultType="java.lang.String" parameterType="java.util.Map">
	SELECT USER_EMAIL 
		FROM BOOK_USERINFO
	WHERE USER_NAME =#{user_name} AND USER_PHONE =#{user_phone} AND GUBUN='nomal'
</select>

<!-- PASSWORD찾기 -->
<select id="findPassword" resultType="java.lang.String">
SELECT USER_PASSWORD 
	FROM BOOK_USERINFO
WHERE USER_EMAIL =#{user_email} AND USER_PHONE =#{user_phone}
</select>

<!-- 소셜회원고유번호 가져오기 -->
<select id="getSId" resultType="java.lang.Integer">
        SELECT SOCIAL_ID FROM BOOK_SOCIALINFO WHERE SOCIAL_EMAIL = #{social_email} AND SOCIAL_GUBUN = #{social_gubun}
    </select>

<!-- 회원탈퇴 -->
<update id="deleteUser">
	UPDATE BOOK_USERINFO
		SET USER_DELFLAG = 'Y'
	WHERE USER_ID = #{user_id}
</update>

<!-- 탈퇴시 예약,대출,연체회원 조회 -->
<resultMap type="BorrowVo" id="BorrowVoMap" >
    <result property="user_id" column="USER_ID"/>
    <result property="borrow_status" column="BORROW_STATUS"/>
</resultMap>
<resultMap type="ReserveVo" id="ReserveVoMap">
	<result property="user_id" column="USER_ID"/>
	<result property="reserve_status" column="RESERVE_STATUS"/>
</resultMap>
<resultMap type="UserVo" id="UserVoMap">
	<collection property="borwVo" resultMap="BorrowVoMap"/>
	<collection property="resvVo" resultMap="ReserveVoMap"/>
</resultMap>
<select id="getNotDelUser" resultMap="UserVoMap">
	SELECT bu.*,bb.BORROW_STATUS ,br.RESERVE_STATUS 
	FROM BOOK_USERINFO bu 
	JOIN BOOK_RESERVE br 
	ON bu.USER_ID =br.USER_ID 
	JOIN BOOK_BORROW bb 
	ON bu.USER_ID = bb.USER_ID 
WHERE bu.USER_ID =#{user_id} AND bb.BORROW_STATUS = 'Y' AND br.RESERVE_STATUS = 'Y'
</select>

















</mapper>
