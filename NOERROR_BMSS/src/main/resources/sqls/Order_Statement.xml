<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.gd.bmss.mapper.OrderDaoImpl">



<insert id="addOrder" parameterType="OrderVo">
<selectKey keyProperty="order_price" order="BEFORE" resultType="java.lang.Integer" > 
SELECT BOOK_PRICE AS ORDER_PRICE FROM BOOK_STOCK WHERE STOCK_NUMBER =#{stock_number}
</selectKey>
INSERT INTO BOOK_ORDER
(ORDER_SEQ, STOCK_NUMBER, ORDER_QUANTITY, ORDER_PRICE, ORDER_DATE, PAY_STATUS, USER_ID)
VALUES(ORDER_SEQ.NEXTVAL, #{stock_number}, 1, #{order_price}, (CURRENT_DATE), (1),#{user_id})
</insert>

<select id="getAllOrder" resultType="OrderVo">
SELECT A.STOCK_NUMBER, A.ORDER_SEQ, A.ORDER_DATE, A.ORDER_QUANTITY, A.ORDER_PRICE,
A.PAY_STATUS, A.USER_ID,USER_ADDRESS
FROM BOOK_ORDER A
JOIN BOOK_USERINFO B ON A.USER_ID = B.USER_ID WHERE PAY_STATUS=1
</select>

<resultMap type="OrderVo" id="OrderMap">
<result property="order_seq" column="ORDER_SEQ"/>
<result property="stock_number" column="STOCK_NUMBER"/>
<result property="order_quantity" column="ORDER_QUANTITY"/>
<result property="order_price" column="ORDER_PRICE"/>
<result property="order_date" column="ORDER_DATE"/>
<result property="pay_status" column="PAY_STATUS"/>
<result property="user_id" column="USER_ID"/>
<collection property="stockvo" resultMap="StockMap"></collection>
</resultMap>

<resultMap type="StockVo" id="StockMap">
<result column="STOCK_NUMBER" property="stock_number"/>
<result column="SELL_STATUS" property="sell_status"/>
<result column="BOOK_SEQ" property="book_seq"/>
<result column="BOOK_PRICE" property="book_price"/>
</resultMap>


<select id="getDetailOrder" resultType="OrderVo" >
SELECT ORDER_SEQ,STOCK_NUMBER, ORDER_QUANTITY , ORDER_PRICE,
  PAY_STATUS, A.USER_ID ,USER_ADDRESS FROM BOOK_ORDER A JOIN BOOK_USERINFO B 
  ON A.USER_ID=B.USER_ID WHERE A.USER_ID=#{user_id}
</select>

<update id="updateAddr">
UPDATE BOOK_USERINFO SET USER_ADDRESS=#{address} WHERE USER_ID =#{id}
</update>

<delete id="delOrder">
DELETE FROM BOOK_ORDER bo WHERE STOCK_NUMBER =#{stock_number}
</delete>
<delete id="delOrders">
DELETE FROM BOOK_ORDER bo WHERE PAY_STATUS=1 AND STOCK_NUMBER IN
<foreach collection="list" item="stock_number"  open="(" separator="," close=")">
#{stock_number}
</foreach>
</delete>

<select id="getOrderUser" resultType="OrderVo">
  SELECT A.ORDER_SEQ,A.STOCK_NUMBER, ORDER_QUANTITY,
       ORDER_PRICE,PAY_STATUS,
       STATUS_TITLE,
       THUMBNAIL,A.USER_ID,
       GENRE_CODE,AUTHOR,
       UI.USER_ADDRESS ,
       A.SELL_STATUS,B.BOOK_CODE
FROM (
    SELECT X.STOCK_NUMBER,
           ORDER_QUANTITY,
           ORDER_PRICE,X.ORDER_SEQ,
           PAY_STATUS,
           STATUS_TITLE,
           BOOK_CODE,X.USER_ID ,
           X.SELL_STATUS  
    FROM (
        SELECT BS.STOCK_NUMBER ,
               ORDER_QUANTITY ,
               ORDER_PRICE,
               bo.ORDER_SEQ ,
               PAY_STATUS ,
               BOOK_SEQ ,
               bo.USER_ID ,
               SELL_STATUS 
        FROM BOOK_STOCK bs 
        RIGHT JOIN BOOK_ORDER bo ON BS.STOCK_NUMBER = BO.STOCK_NUMBER
    ) X 
    JOIN BOOK_STATUS bs ON X.BOOK_SEQ = BS.BOOK_SEQ
) A 
JOIN BOOKINFO b ON A.BOOK_CODE = B.BOOK_CODE
JOIN BOOK_USERINFO UI ON A.USER_ID = UI.USER_ID
WHERE A.USER_ID=#{user_id} AND A.SELL_STATUS='Y'
ORDER BY A.STOCK_NUMBER

</select>



</mapper>
