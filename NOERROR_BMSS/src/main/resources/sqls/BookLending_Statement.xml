<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper  namespace="com.gd.bmss.mapper.BookLendingDaoImpl">

<resultMap type="com.gd.bmss.vo.BookInfoVo" id="bInfoMap">
	<result column="BOOK_CODE" property="book_code"/>
	<result column="ISBN" property="isbn"/>
	<result column="TITLE" property="title"/>
	<result column="AUTHOR" property="author"/>
	<result column="GENRE_CODE" property="genre_code"/>
	<result column="GENRE_NAME" property="genre_name"/>
	<result column="PUBLISHER" property="publisher"/>
	<result column="PUBLISH_DATE" property="publish_date"/>
	<result column="THUMBNAIL" property="thumbnail"/>
	<result column="CONTENT" property="content"/>
	<result column="INTRO" property="intro"/>
	<result column="REVIEW" property="review"/>
	<result column="AUTHORINFO" property="authorinfo"/>
	
	<collection property="bsVo" resultMap="bStatusMap"/>
</resultMap>

<resultMap type="com.gd.bmss.vo.Book_StatusVo" id="bStatusMap">
	<result column="STATUS_CODE" property="status_code"/>
	<result column="BOOK_SEQ" property="book_seq"/>

	<result column="BORROW_SEQ" property="borrow_seq"/>
	<result column="BORROW_TITLE" property="borrow_title"/>
	<result column="START_DATE" property="start_date"/>
	<result column="RETURN_DATE" property="return_date"/>
	<result column="RENEW" property="renew"/>
	<result column="BORROW_STATUS" property="borrow_status"/>
	
	<result column="RESERVE_SEQ" property="reserve_seq"/>
	<result column="RESERVE_TITLE" property="reserve_title"/>
	<result column="RESERVE_DATE" property="reserve_date"/>
	<result column="RESERVE_STATUS" property="reserve_status"/>

	<result column="USER_ID" property="user_id"/>
<!-- 	<result column="RESERVE_USER_ID" property="reserve_user_id"/> -->
	
	<collection property="borwVo" resultMap="borrowMap"/>
	<collection property="resvVo" resultMap="reserveMap"/>
</resultMap>

<resultMap type="com.gd.bmss.vo.BorrowVo" id="borrowMap">
	<result column="BORROW_SEQ" property="borrow_seq"/>
	<result column="BORROW_TITLE" property="borrow_title"/>
	<result column="START_DATE" property="start_date"/>
	<result column="RETURN_DATE" property="return_date"/>
	<result column="RENEW" property="renew"/>
	<result column="BORROW_STATUS" property="borrow_status"/>
	<result column="USER_ID" property="user_id"/>
	<result column="BOOK_SEQ" property="book_seq"/>
	
	<result column="OVER_RETURN" property="over_return"/>
	<result column="PENALTY_DATE" property="penalty_date"/>
</resultMap>

<resultMap type="com.gd.bmss.vo.ReserveVo" id="reserveMap">
	<result column="RESERVE_SEQ" property="reserve_seq"/>
	<result column="RESERVE_TITLE" property="reserve_title"/>
	<result column="RESERVE_DATE" property="reserve_date"/>
	<result column="RESERVE_STATUS" property="reserve_status"/>
<!-- 	<result column="USER_ID" property="user_id"/> -->
	<result column="RESERVE_USER" property="user_id"/>
	<result column="BOOK_SEQ" property="book_seq"/>
</resultMap>

<resultMap type="com.gd.bmss.vo.UserVo" id="userMap">
	<result column="USER_ID" property="user_id"/>
	<result column="USER_NAME" property="user_name"/>
	<result column="USER_EMAIL" property="user_email"/>
	<result column="USER_PHONE" property="user_phone"/>
	<result column="USER_AUTH" property="user_auth"/>
	<result column="PENALTY_DATE" property="penalty_date"/>
	
	<collection property="borwVo" resultMap="borrowMap"/>
	<collection property="resvVo" resultMap="reserveMap"/>
</resultMap>


<!-- 대출신청 -->
<insert id="insertBorrow" parameterType="BorrowVo">
	INSERT INTO BOOK_BORROW
	(BORROW_SEQ, BORROW_TITLE, START_DATE, RETURN_DATE, RENEW, BORROW_STATUS , USER_ID, BOOK_SEQ)
	VALUES
	(BORROW_SEQ.NEXTVAL, #{borrow_title}, CURRENT_DATE, CURRENT_DATE+14 ,  'N' , 'Y' , #{user_id}, #{book_seq})
<!-- INSERT INTO BOOK_BORROW -->
<!-- (BORROW_SEQ, BORROW_TITLE, START_DATE, RETURN_DATE, RENEW, BORROW_STATUS , USER_ID, BOOK_SEQ) -->
<!-- VALUES(BORROW_SEQ.NEXTVAL, #{borrow_title}, #{start_date}, #{return_date} ,  'N' , 'Y' , #{user_id}, #{book_seq}) -->
</insert>

<!-- 대출조건 다시 -->
<select id="borrowCondition" resultType="java.util.Map">
	SELECT SUM(ABS(TO_DATE(RETURN_DATE,'YY-MM-DD') - TO_DATE(CURRENT_DATE,'YY-MM-DD'))) AS OVERDUE
			, COUNT(*) CNT
	FROM BOOK_STATUS bs 
	LEFT JOIN BOOK_BORROW bb USING(BOOK_SEQ)
	LEFT JOIN BOOK_RESERVE br USING(BOOK_SEQ)
	<![CDATA[
	WHERE bb.BORROW_STATUS ='Y'
		AND bb.USER_ID=#{user_id}
		AND ((START_DATE<CURRENT_DATE-14 AND RENEW = 'N') 
				OR (START_DATE<CURRENT_DATE-21 AND RENEW = 'Y'))
				]]>
</select>

<!-- 대출불가능한 경우 1.예약중이거나 대출중이거나 도서상태가 일반이 아님 -->
<select id="borrowNotOk" resultMap="bStatusMap">
	SELECT BOOK_SEQ
		FROM BOOK_STATUS bs
		LEFT JOIN BOOK_BORROW bb USING(BOOK_SEQ)
		LEFT JOIN BOOK_RESERVE br USING(BOOK_SEQ)
		WHERE (bb.BORROW_STATUS ='Y'
			OR br.RESERVE_STATUS ='Y')
			OR bs.STATUS_CODE !='A'
</select>

<!-- 대출불가능한 경우 2. 연체회원인 경우 -->
<select id="isPenaltyUser" resultMap="userMap">
	SELECT MAX(PENALTY_DATE) PENALTY_DATE
		<!-- , bu.USER_ID -->
		FROM BOOK_USERINFO bu
		JOIN BOOK_BORROW bb  ON bb.USER_ID = bu.USER_ID
		WHERE bu.USER_ID =#{user_id}
		GROUP BY bu.USER_ID
</select>


<!-- 회원의 대출가능 잔여권수 판단 -->
<!-- <select id="countBorrow" resultMap="borrowMap"> -->
<select id="countBorrow" resultType="java.lang.Integer">
SELECT COUNT(*)
	FROM BOOK_BORROW bb 
	JOIN BOOK_USERINFO bu USING(USER_ID)
	WHERE BORROW_STATUS = 'Y'
	AND USER_ID =#{user_id}
</select>

<!-- 예약자의 대출신청 //트랜잭션//////물어볼것 -->
<select id="borrowReserver" resultMap="bStatusMap">
SELECT
  T2.USER_ID,
  T1.BOOK_SEQ 
FROM
  T2
LEFT JOIN T1 ON T1.BOOK_CODE = T2.BOOK_CODE AND T2.RESERVE_RANK = T1.BORROW_RANK
LEFT JOIN (SELECT bb.USER_ID, MAX(BU.PENALTY_DATE) PENALTY_DATE
   FROM BOOK_BORROW bb 
    LEFT JOIN BOOK_USERINFO bu ON bb.USER_ID = bu.USER_ID
    GROUP BY bb.USER_ID
) USER_P
ON T2.USER_ID = USER_P.USER_ID 
WHERE (PENALTY_DATE IS NULL OR SYSDATE > PENALTY_DATE)
<!-- AND T2.USER_ID=#{user_id} -->
AND T2.BOOK_CODE=#{book_code}
ORDER BY
  T2.USER_ID;
</select>

<!-- 트랜잭션/예약취소 -->
<delete id="deleteReserveAfterBorrow">
DELETE FROM BOOK_RESERVE
WHERE BOOK_SEQ=#{book_seq}
</delete>

<!-- 대출 조회 : 관리자의 전체회원 대출현황 조회 -->
<select id="getAllBorrowNow" resultMap="borrowMap">
SELECT USER_ID ,BORROW_TITLE, TO_CHAR(START_DATE,'YYYY-MM-DD') AS START_DATE,
		TO_CHAR(RETURN_DATE,'YYYY-MM-DD') AS RETURN_DATE, RENEW, BORROW_STATUS , BOOK_SEQ
		,<![CDATA[CASE 
	        WHEN (START_DATE < CURRENT_DATE - 14 AND RENEW = 'N' AND BORROW_STATUS='Y')
	        	OR (START_DATE < CURRENT_DATE - 21 AND RENEW = 'Y' AND BORROW_STATUS='Y')
	        	THEN ABS(TO_DATE(RETURN_DATE,'YY-MM-DD') - TO_DATE(CURRENT_DATE,'YY-MM-DD'))
	        ELSE 0
	        END AS OVER_RETURN]]>
	FROM BOOK_BORROW
	JOIN BOOK_USERINFO bu 
	USING(USER_ID)
	WHERE BORROW_STATUS ='Y'
<!-- 	AND URETURN_DATE >SYSDATE -->
	ORDER BY BORROW_TITLE
<!-- 		 ,USER_ID  -->
</select>

<!-- 대출 조회 : 관리자의 특정회원 대출현황 -->
<select id="getOneBorrowNow" resultMap="borrowMap">
SELECT BORROW_TITLE, TO_CHAR(START_DATE,'YYYY-MM-DD') AS START_DATE,TO_CHAR(RETURN_DATE,'YYYY-MM-DD') AS RETURN_DATE,
		 RENEW, BORROW_STATUS, USER_ID, BOOK_SEQ, TO_CHAR(PENALTY_DATE,'YYYY-MM-DD') AS PENALTY_DATE
		 ,<![CDATA[CASE 
	        WHEN (START_DATE < CURRENT_DATE - 14 AND RENEW = 'N' AND BORROW_STATUS='Y')
	        	OR (START_DATE < CURRENT_DATE - 21 AND RENEW = 'Y' AND BORROW_STATUS='Y')
	        	THEN ABS(TO_DATE(RETURN_DATE,'YY-MM-DD') - TO_DATE(CURRENT_DATE,'YY-MM-DD'))
	        ELSE 0
	        END AS OVER_RETURN]]>
	FROM BOOK_BORROW
	JOIN BOOK_USERINFO bu 
	USING(USER_ID)
	WHERE  BORROW_STATUS ='Y'
<!-- 	AND URETURN_DATE >SYSDATE  -->
	AND USER_ID =#{user_id}
	ORDER BY USER_ID
</select>

<!-- 대출 조회 : 회원의 자신의 대출현황 조회 -->
<select id="myBorrowNow" resultMap="bInfoMap">
SELECT BORROW_TITLE, AUTHOR, PUBLISHER, GENRE_NAME, bs.BOOK_SEQ, b.BOOK_CODE, THUMBNAIL
		,TO_CHAR(START_DATE,'YYYY-MM-DD') AS START_DATE,TO_CHAR(RETURN_DATE,'YYYY-MM-DD') AS RETURN_DATE, RENEW
		,<![CDATA[CASE 
	        WHEN (START_DATE < CURRENT_DATE - 14 AND RENEW = 'N' AND BORROW_STATUS='Y')
	        	OR (START_DATE < CURRENT_DATE - 21 AND RENEW = 'Y' AND BORROW_STATUS='Y')
	        	THEN ABS(TO_DATE(RETURN_DATE,'YY-MM-DD') - TO_DATE(CURRENT_DATE,'YY-MM-DD'))
	        ELSE 0
	        END AS OVER_RETURN]]>
	FROM BOOK_BORROW bb  
	JOIN BOOK_STATUS bs ON bb.BOOK_SEQ=bs.BOOK_SEQ  
	JOIN BOOKINFO b ON b.BOOK_CODE =bs.BOOK_CODE 
	JOIN BOOK_GENRE bg ON b.GENRE_CODE =bg.GENRE_CODE 
	JOIN BOOK_USERINFO bu 
	USING(USER_ID)
	WHERE  BORROW_STATUS ='Y'
<!-- 	AND RETURN_DATE >SYSDATE -->
	AND USER_ID =#{user_id}
	ORDER BY BORROW_SEQ
</select>

<!-- 대출 조회 : 관리자의 특정회원대출내역 조회 -->
<select id="getOneBorrowHistory" resultMap="borrowMap">
SELECT USER_ID, BORROW_TITLE, TO_CHAR(START_DATE,'YYYY-MM-DD') AS START_DATE,
		TO_CHAR(RETURN_DATE,'YYYY-MM-DD') AS RETURN_DATE, RENEW, BORROW_STATUS, BOOK_SEQ
		,TO_CHAR(PENALTY_DATE,'YYYY-MM-DD') AS PENALTY_DATE
		,<![CDATA[CASE 
	        WHEN (START_DATE < CURRENT_DATE - 14 AND RENEW = 'N' AND BORROW_STATUS='Y')
	        	OR (START_DATE < CURRENT_DATE - 21 AND RENEW = 'Y' AND BORROW_STATUS='Y')
	        	THEN ABS(TO_DATE(RETURN_DATE,'YY-MM-DD') - TO_DATE(CURRENT_DATE,'YY-MM-DD'))
	        ELSE 0
	        END AS OVER_RETURN]]>
	FROM BOOK_BORROW
	JOIN BOOK_USERINFO bu 
	USING(USER_ID)
	WHERE USER_ID =#{user_id}
	ORDER BY BORROW_SEQ
</select>

<!-- 대출 조회 : 회원의 자신의 대출내역 조회 -->
<select id="myBorrowHistory" resultMap="bInfoMap">
SELECT BORROW_TITLE, AUTHOR, PUBLISHER, GENRE_NAME, b.BOOK_CODE, THUMBNAIL
		,TO_CHAR(START_DATE,'YYYY-MM-DD') AS START_DATE,TO_CHAR(RETURN_DATE,'YYYY-MM-DD') AS RETURN_DATE, BORROW_STATUS 
		,<![CDATA[CASE 
	        WHEN (START_DATE < CURRENT_DATE - 14 AND RENEW = 'N' AND BORROW_STATUS='Y')
	        	OR (START_DATE < CURRENT_DATE - 21 AND RENEW = 'Y' AND BORROW_STATUS='Y')
	        	THEN ABS(TO_DATE(RETURN_DATE,'YY-MM-DD') - TO_DATE(CURRENT_DATE,'YY-MM-DD'))
	        ELSE 0
	        END AS OVER_RETURN]]>
	FROM BOOK_BORROW bb  
	JOIN BOOK_STATUS bs ON bb.BOOK_SEQ=bs.BOOK_SEQ  
	JOIN BOOKINFO b ON b.BOOK_CODE =bs.BOOK_CODE 
	JOIN BOOK_GENRE bg ON b.GENRE_CODE =bg.GENRE_CODE
	JOIN BOOK_USERINFO bu 
	USING(USER_ID)
	WHERE USER_ID =#{user_id}
	ORDER BY BORROW_SEQ
</select>

<!-- 반납 신청 -->
<update id="returnBook" parameterType="java.util.Map">
	UPDATE BOOK_BORROW
	SET RETURN_DATE= SYSDATE, BORROW_STATUS='N'
	<!-- WHERE BOOK_SEQ= #{book_seq} -->
	WHERE BOOK_SEQ IN 
	<foreach collection="chkBooks" item="book_seq" open="(" separator="," close=")">
		#{book_seq}
	</foreach>
</update>

<!-- 연장신청 -->
<update id="renewBook">
<![CDATA[
UPDATE BOOK_BORROW
SET RETURN_DATE = RETURN_DATE + 7, RENEW = 'Y'
WHERE BOOK_SEQ = (SELECT BOOK_SEQ
					FROM BOOK_BORROW bb LEFT JOIN BOOK_RESERVE br 
					USING(BOOK_SEQ)
					WHERE (br.RESERVE_STATUS IS NULL OR br.RESERVE_STATUS ='N') AND RENEW = 'N'
					AND BORROW_STATUS ='Y'
					AND RETURN_DATE - SYSDATE < 7
					AND RETURN_DATE - SYSDATE > 0
					AND BOOK_SEQ = #{book_seq})
]]>
</update>



<!-- 예약신청 -->
<insert id="insertReserve" parameterType="ReserveVo">
INSERT INTO BOOK_RESERVE
(RESERVE_SEQ, RESERVE_TITLE, RESERVE_DATE, RESERVE_STATUS, USER_ID, BOOK_SEQ)
VALUES(RESERVE_SEQ.NEXTVAL, #{reserve_title}, TO_DATE(CURRENT_DATE,'YY-MM-DD')
	, 'Y' , #{user_id}, #{book_seq})
<!-- INSERT INTO BOOK_RESERVE -->
<!-- (RESERVE_SEQ, RESERVE_TITLE, RESERVE_DATE, RESERVE_STATUS, USER_ID, BOOK_SEQ) -->
<!-- VALUES(RESERVE_SEQ.NEXTVAL, #{reserve_title}, #{reserve_date}, 'Y' , #{user_id}, #{book_seq}) -->
</insert>

<!-- 예약불가 1.연체회원인 경우 //대출 동일-->

<!-- 예약이 가능한 조건(예약,대출확인여부) -->
<select id="reserveOk" resultMap="bStatusMap">
SELECT BOOK_SEQ 
FROM BOOK_STATUS bs  
LEFT JOIN BOOK_BORROW bb USING(BOOK_SEQ)
LEFT JOIN BOOK_RESERVE br USING(BOOK_SEQ)
WHERE ( bb.BORROW_STATUS ='Y')
AND (br.RESERVE_STATUS IS NULL OR br.RESERVE_STATUS ='N')
AND bs.STATUS_CODE='A'
</select>

<!-- 잔여예약권수 -->
<select id="countReserve" resultType="java.lang.Integer">
SELECT COUNT(*)
	FROM BOOK_RESERVE br
	JOIN BOOK_USERINFO bu ON br.USER_ID = bu.USER_ID
	WHERE  br.USER_ID =#{user_id}
	AND RESERVE_STATUS = 'Y'
</select>

 <!-- 회원의 예약취소 --> 
<update id="cancelMyReserve" parameterType="java.util.Map">
UPDATE BOOK_RESERVE
SET RESERVE_STATUS='N' 
WHERE BOOK_SEQ= (SELECT BOOK_SEQ
				FROM BOOK_RESERVE br
				JOIN BOOK_USERINFO bu USING(USER_ID)
				WHERE USER_ID = #{user_id}
				AND BOOK_SEQ=#{book_seq})
AND RESERVE_STATUS ='Y'
</update>

<!-- 스케줄러 자동 취소 -->
<update id="CancelReserveForCron">
<![CDATA[
UPDATE BOOK_RESERVE
SET RESERVE_STATUS='N' 
WHERE BOOK_SEQ in (SELECT br.BOOK_SEQ 
				FROM BOOK_RESERVE br JOIN BOOK_BORROW bb ON br.BOOK_SEQ =bb.BOOK_SEQ 
				WHERE RETURN_DATE+2 <SYSDATE
				AND RESERVE_STATUS='Y')
		]]>
</update>

<!-- 스케줄러 예약취소 자동삭제 -->
<delete id="deleteReserveForCron">
DELETE FROM BOOK_RESERVE
WHERE RESERVE_STATUS = 'N'
</delete>

<!-- 예약현황조회 : 관리자의 전체회원 -->
<select id="getAllReserveNow" resultMap="bStatusMap">
SELECT bs.BOOK_SEQ , RESERVE_TITLE, bb.USER_ID , br.USER_ID AS RESERVE_USER
	, TO_CHAR(RESERVE_DATE,'YYYY-MM-DD') AS RESERVE_DATE , TO_CHAR(RETURN_DATE,'YYYY-MM-DD') AS RETURN_DATE
	FROM BOOK_RESERVE br 
	JOIN BOOK_STATUS bs ON br.BOOK_SEQ=bs.BOOK_SEQ  
	JOIN BOOK_BORROW bb  ON bb.BOOK_SEQ =bs.BOOK_SEQ 
	JOIN BOOK_USERINFO bu ON br.USER_ID = bu.USER_ID 
	WHERE RESERVE_STATUS ='Y' 
<!-- 	AND RETURN_DATE+2 >SYSDATE -->
	ORDER BY RETURN_DATE, RESERVE_DATE
</select>

<!-- 예약현황조회 : 회원의 자신의 현황 -->
<select id="myReserveNow" resultMap="bInfoMap">
SELECT bs.BOOK_SEQ ,RESERVE_TITLE,BORROW_TITLE, AUTHOR, PUBLISHER, GENRE_NAME, 
	RESERVE_STATUS, BORROW_STATUS, br.USER_ID, b.BOOK_CODE,THUMBNAIL
	,TO_CHAR(RESERVE_DATE,'YYYY-MM-DD') AS RESERVE_DATE
	,TO_CHAR(RETURN_DATE,'YYYY-MM-DD') AS RETURN_DATE
FROM BOOK_RESERVE br 
JOIN BOOK_STATUS bs ON br.BOOK_SEQ=bs.BOOK_SEQ  
LEFT JOIN BOOK_BORROW bb  ON bb.BOOK_SEQ =bs.BOOK_SEQ 
JOIN BOOKINFO b ON b.BOOK_CODE =bs.BOOK_CODE 
JOIN BOOK_GENRE bg ON b.GENRE_CODE =bg.GENRE_CODE 
JOIN BOOK_USERINFO bu ON br.USER_ID = bu.USER_ID 
WHERE RESERVE_STATUS ='Y'
AND br.USER_ID =#{user_id}
AND (RETURN_DATE+2) >SYSDATE
</select>

<!-- 연체시 패널티기간 산정 -->
<update id="calPenalty" parameterType="UserVo">
UPDATE BOOK_USERINFO
SET PENALTY_DATE = SYSDATE + 2+(
    SELECT SUM(TO_NUMBER(TRUNC(SYSDATE) - TRUNC(RETURN_DATE)))
    FROM BOOK_BORROW
    WHERE SYSDATE > RETURN_DATE 
    AND BORROW_STATUS = 'Y'
    AND USER_ID = #{user_id}
)
WHERE USER_ID = #{user_id}
</update>


</mapper>
